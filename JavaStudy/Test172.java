/*===================================
■■■자바의 기본 입출력(I/O)■■■ 
================================*/

//자바는 단일 입출력 구조로 값이 들어오는 곳은 1개  나가는 곳도 1개이다.
//자바의 입출력을 크게 stream으로 볼수있다. 
//크게 나누면 입력 스트림 + 출력스트림 이다
//입력스트림 1.문자 기반 입력 스트림 2.바이트 기반 입력 스트림 
//출력스트림 1.문자 기반 출력 스트림 2.바이트 기반 출력 스트림

//즉 입력받아 출력할 데이터를 조각조각 내서 출력 스트림으로 보내서 출력
//중간에 받은 데이터가 끊기면 받은곳까지는 저장이 되있음
//직렬화를 수행해서 보낸다.
//순서대로 조각조각내서 보낸다.

/*
-- 자바의 기본 입출력 개요
  
  -자바에서의 모든 데이터의 입출력은 스트림(stream) 이라는 개념에 의해
   이루어지는데 스트림(stream) 이라는 단어의 사전적 의미는
   "흐르는 물"의 개념이며, 이는 연속된 일련의 데이터를 일컫는다.

  -데이터 입출력 시 모든 데이터를 형태와 관계없이 일련의 흐름으로
   전송을 하는 것이 스트림 입출력 모델 기본 개념이다.

  -기본적으로 스트림(stream)에는
    바이트 기반 스트림과 , 문자 기반 스트림이 있다.

--바이트 스트림(byte-stream) 입출력

  -InputStream 클래스와 OutputStream 클래스, 그리고 이들의 하위 클래스를
   통해서 제공되는 바이트 스트림(byte-stream)을 위한 표준 입출력으로
   8비트 크기를 갖는 바이트들의 스트림이 입출력된다.
   (바이트, 바이트배열, 정수 등)

   문자기반 <- InputStreamReader <-바이트기반
               InputStream = 바이트기반 Reader =문자기반
			   이렇기에 번역기의역할을 할 수 있는것


  
 --문자스트림(character-stream)입출력
  - Reader클래스와 Writer 클래스, 그리고 이들의 하위 클래스에 의해
    구현되었으며, 8비트 크기를 갖는 바이트들의 스트림이 아닌
	16비트 크기를 갖는 유니코드 문자들의 스트림이라는 점에서 차이가 있다.
	(문자,문자열,문자배열 등)

--- 스트림(stream)의 특징

  -스트림은 FIFO 구조이다.
    FIFO구조란 먼저 들어간 것이 먼저 나오는 형태로
	스트림의 데이터는 순자척으로 흘러가며 순차적 접근밖에는 허용되지 않는다.

  -스트림은 단방향이다.
    자바에서 스트림은 읽기 쓰기가 동시에 이루어지지 않는다.
	따라서 읽기 쓰기가 필요하다면 읽는 스트림과 쓰는 스트림을
	하나씩 열어서 사용해야 한다.

  - 스트림은 지연될 수 있다.
     스트림에 넣어진 데이터는 처리되기 전에는 스트림에 사용하는 스레드는 지연(blocking)상태에 빠진다.
	 네트워크 상에서는 데이터가 모두 전송되기 전까지 스레드는 지연(blocking)상태가 된다.
*/
import java.io.IOException;

public class Test172
{
	public static void main(String[] args)throws IOException
	{
		int data;
		char ch;

		System.out.println("문자열 입력(종료:ctrl+z)");
		
		//read() : InputStream클래스의 대표적 메소드 -> 바이트 스트림

		while( (data = System.in.read()) != -1 ) //ctrl_z 가 -1값이다.
		{
			ch = (char)data;
			//System.out.print(ch); //바이트 기반인 read로 입력되고 문자열 기반인 print로 출력됬기에 서로의 방식이 달라 이상한 결과(인코딩과 디코딩이 불일치)

			/*
			유동현
			???¿??
			이날니ㅏㅓㄴ아ㅣ런ㅇ
			??³?´?¤¿¤?¤¤¾Æ¤?·±¤·
			slkfmsdlfsdmk
			slkfmsdlfsdmk
			123423
			123423
			한글은 한 바이트가 한글자가 되는 문자가 아니기에 2개로 쪼개진 한글을 1바이트 단위로 출력하니 이상한 결과가 나온다.
			*/

			System.out.write(ch); //.write() : OutputStream 클래스의 대표적 메소드(->바이트 스트림)
			/*								//바이트 기반인 read 바이트 기반인 write 이므로 인코딩과 디코딩 방식이 일치한다. 
			유동현                          //고로 같은결과가 나온다.
			유동현							//문자기반 스트림은 쪼개진 문자를  한문자로 합치면서 출력한다 하지만 바이트 기반 스트림에는 그런 의무가 없다.
			abcd                            //즉 바이트 입력 : 바이트 출력  문자 입력: 문자 출력 이렇게 맞춰야한다.
			abcd
			123124
			123124
			';';'
			';';'
			*/

		}
			
	}
}