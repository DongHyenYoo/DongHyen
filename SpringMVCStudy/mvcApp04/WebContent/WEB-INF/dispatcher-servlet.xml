<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-3.0.xsd">
	<context:component-scan
		base-package="org.springframework.samples.petclinic.web" />

	<!-- ※ 『dispatcher-servlet.xml』 의 기본 샘플코드 -->
	<!--  이코드는 기본설정에 대한 템블릿을 복사하기 위해 스프링 doc를 참조하여 작성한다. -->
	<!--  ① 『C:\Downloads\s-f-3.0.2-with-docs\spring-framework-3.0.2.RELEASE\docs\spring-framework-reference\htmlsingle』경로로 이동-->
	<!--  ②『spring-framework-reference.html』파일 실행-->
	<!--  ③pdf의 경우 본문페이지 425페이지 찾아서 이동 450/ 805 페이지로 이동-->
	<!--  ④ 페이지 하단의 XML 파일 샘플코드 복사 & 붙여넣기 -->
	
	
	<!-- BeanNameUrlHandlerMapping -->
	
	 
	<bean id="beanNameUrlHandlerMapping" class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping">
		<property name="alwaysUseFullPath" value="true"></property>
		<property name="order" value="1"></property>
	</bean>
	
	<!--
		※ 『BeanNameUrlHandlerMapping』
		HTTP 요청 URL과 빈(bean)의 이름을 비교하여
		일치하는 빈(bean)을 찾아주는 역할을 수행한다.
		빈 이름에는 『*』, 『**』, 『?』를 이용한 패턴을 넣을 수 있다.
		(ANT 패턴)
		하지만, 컨트롤러의 갯수가 많아지면
		URL 정보다 XML 이나 Annotation에 분산되어 파악이 어렵기 때문에
		복잡한 애플리케이션에서는 사용하지 않는 것이 바람직하다.	
		
		ex)
		<bean name="/hello*" class="HelloController" />
		 →hello 로 시작하면 모두 여기에 매핑된다.
		 
		 <bean name="/root/**/sub" class="SubController" />
		 → 『**』는 하나 이상의 경로를 매핑할 수 있다.
	
		- alwaysUseFullPath
		 : URL 매핑은 기본적으로
		  『어플리케이션 컨텍스트 패스』 , 『서블릿 패스』 를 제외한
		  나머지만 가지고 비교하게 된다.
		  즉, 어플리케이션이 『/test』에 배포되고,
		  DispatcherServlet URL mapping 이 『/app/*』일 경우
		  전체 URL은 『/test/app/hello』 와 같은 형태가 되지만
		  핸들러 매핑은 『/hello』만을 대상으로 삼는다는 의미이다.
		  이는 애플리케이션이나 서블릿이 변경되어도
		  애플리케이션의 매핑 구조는 영향을 받지 않게 하기 위해서이다.
		 『 alwaysUseFullPath』 옵션을 true로 설정하면
		  이를 해제하고 모든 URL을 대상으로 변경할 수 있다.
		  
		  - order
		   : 핸들러 매핑은 한 개 이상을 동시에 사용할 수 있다.
		    한 개의 매핑으로 사용하는 것이 이상적이지만
		    그렇지 않은 상황이 존재한다.
		    두 개 이상의 핸들러 매핑이 등록되었는데
		    두 개 이상의 핸들러 매핑이 등록된 상황에서
		    URL이 중복 매핑될 경우,
		    『order』 프로퍼티를 통해 매핑 우선순위를 지정할 수 있다.
		    『order』 프로퍼티의 값이 작은 매핑 전략이 높은 우선순위를 갖는다.
	  -->
	
	
	<!-- 태민이 설명
	
	     HandlerMapping
         -MVC패턴의 핵심은 『컨트롤러』를 통해 진입한다는 것.
         
         -HandlerMapping 하면 servlet / servlet-mapping이 떠올라야함
         
         -컨트롤러로 진입한다는 것은 요청이 들어왔다는것, 그것에 맞는 응답이 있어야한다는것
         
         -단일 요청에 단일 응대라면... 하나의 어플리케이션이 받는 요청이 1000개라면...
           매핑구조를 1000개를 만들어야함 
         
         -1000개의 요청에을 1000개의 매핑을 해줄수는 없기에....
          패턴을 나눠서 분류(유형에 따라 분류) → 핸들러매핑(5가지의 유형)
          [요청의 유형에 따라 분류하는것.]  
           
         - 그중에 우리가 배울 것 BeanNameUrlHandlerMapping
         
         
         ViewResolver : 비서 (컨트롤러 따까리)
         컨트롤러는 얄미운놈.
         (벽돌날라주세요 라는 요청이 들어오면 자신이 하지 않고, 시킴.)
         (벽돌날라주는것 을 시키는것 조차도 대상을 명확히 파악하는것이 아니라,
          ~잘하는 팀 이런식으로 시키는 구조
          : 비서야! 알아보고 잘하는애한테 시켜!)
          
          디폴트 ViewResolver가 있는데 커스터마이징 해서 등록해주게 되면 간편하게 쓸수있음
          //mav.setViewName("/WEB-INF/view/EmployeeList.jsp");
          →
          //   mav.setViewName("EmployeeList.jsp");
	 -->
	
	
	
	<!-- InternalResourceViewResolver -->
	
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- "WEB-INF/view/EmployeeList.jsp" -->
		<!-- "/WEB-INF/view/" + "EmployeeList" + ".jsp"  -->
		<property name="prefix" value="/WEB-INF/view/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>
	
	<!--
		※ 『InternalResourceViewResolver』
		스프링 컨트롤러는 뷰에 의존적이지 않다.
		컨트롤러가 지정한 뷰 이름으로부터
		응답 결과 화면을 생성하는 뷰 객체는 ViewResolver가 얻어낸다.
		스프링은 몇 가지 ViewResolver 구현 클래스를 제공하고 있는데,
		이 중 주요 ViewResolver 구현 클래스는 다음과 같다.
		
		- InternalResourceViewResolver
		 : 뷰 이름으로부터 JSP 나 타일즈(Tiles) 연동을 위한
		   View 객체를 반환한다.
		- VelocityViewResolver
		 : 뷰 이름으로부터 Velocity 연동을 위한 View 객체를 반환한다.
		- VelocityLayoutViewResolver
		   : VelocityViewResolver의 하위 객체로
		     VelocityViewResolver와 동일한 기능을 제공하며
		      이에 더하여 Velocity 의 레이아웃 기능을 제공한다.
		- BeanNameViewResolver
		  : 뷰 이름과 같은 이름을 갖는 빈 객체를 View 객체로 사용한다.
		- ResourceBundleViewResolver
		 : 뷰 이름과 View 객체 간 매핑 정보를 저장하기 위해
		 	Resource 파일을 사용한다.
		- XmlViewResolver
		  : 뷰 이름과 View 객체 간 매핑 정보를 저장하기 위해
		    XML 파일을 사용한다.
		    
		※ ViewResolver Interface
		  - ViewResolver 는 뷰 이름과 지역화를 위한
		    Locale 을 파라미터로 전달받으며,
		    매핑되는 View 객체를 반환한다.
		    매핑되는 View 객체가 존재하지 않으면 null을 반환한다.
		    
		※ View 객체
		  - 『getContentType()』 메소드는 "text/html"』과 같은
		    응답 결과의 컨텐츠 타입을 반환한다.
		    『render()』 메소드는 실제로 응답 결과를 생성한다.
		    『render()』 메소드의 첫 번째 파라미터인 model 에는
		    컨트롤러가 반환한 ModelAndView 객체의 모델 데이터가 전달된다.
		    각각의 View 객체는 이 모델 데이터로부터 응답 결과를 생성하는데
		    필요한 정보를 얻어낸다.
		    
		    
		 ※ InternalResourceViewResolver 설정
		   - InternalResourceViewResolver 클래스는 JSP나 HTML 파일과 같이
		   웹 어플리케이션의 내부 Resource를 이용하여 뷰를 생성하는
		   AbstractUrlBasedView 타입의 뷰 객체를 반환한다.
		   기본적으로 사용하는 뷰 클래스는 InternalResourceView 클래스이다.
		   
		   - InternalResourceViewResolver는
		    컨트롤ㄹ러가 지정한 뷰 이름으로부터 실제로 사용될 뷰를 선택하는데,
		    이 때, 컨트롤러가 지정한 뷰 이름 앞뒤로
		    prefix 프로퍼티와 suffix 프로퍼티를 추가한 값이
		    실제로 사용될 Resource의 경로가 된다.
	  -->	
		
	
	
	
	<!-- ※ 사용자 정의 Controller 객체 등록 및 요청 URL 매핑 주소 등록 -->
	<!-- URL 매핑하려면 bean의 name 속성 -->
	
	
	<!-- DataSource →SimpleDriverDataSource -->
	<bean id="myDataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
		<property name="driverClass" value="oracle.jdbc.driver.OracleDriver"></property>
		<property name="url" value="jdbc:oracle:thin:@211.238.142.47:1521:xe"></property>
		<property name="username" value="scott"></property>
		<property name="password" value="tiger"></property>
	</bean>
	
	<!-- DataSource →SimpleDriverDataSource -->
	<bean id="localDataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
		<property name="driverClass" value="oracle.jdbc.driver.OracleDriver"></property>
		<property name="url" value="jdbc:oracle:thin:@211.238.142.49:1521:xe"></property>
		<property name="username" value="scott"></property>
		<property name="password" value="tiger"></property>
	</bean>
	
	<!-- DAO 등록 -->
	
	<bean id="employeeDAO" class="com.test.mvc.EmployeeDAO">
		<property name="dataSource" ref="myDataSource"></property>
	</bean>
	
	<bean id="positionDAO" class="com.test.mvc.PositionDAO">
		<property name="dataSource" ref="myDataSource"></property>
	</bean>
	
	<bean id="departmentDAO" class="com.test.mvc.DepartmentDAO">
		<property name="datasource" ref="myDataSource"></property>
	</bean>
	
	<bean id="regionDAO" class="com.test.mvc.RegionDAO">
		<property name="dataSource" ref="myDataSource"></property>
	</bean>
	
	
	<!-- 직원 리스트 Controller 등록 -->	
	<bean name="/employeelist.action" class="com.test.mvc.EmployeeListController">
	
	<property name="dao" ref="employeeDAO"></property>
	
	</bean>
	
	<!-- 직원 데이터 입력 폼 Controller 등록 -->
	
	<bean name="/employeeinsertform.action" class="com.test.mvc.EmployeeInsertFormController">
		<property name="dao" ref="employeeDAO"></property>
	</bean>
	
	<bean name="/ajax.action" class="com.test.mvc.AjaxController">
		<property name="dao" ref="employeeDAO"></property>
	</bean>
	
	<bean name="/employeeinsert.action" class="com.test.mvc.EmployeeInsertController">
		<property name="dao" ref="employeeDAO"></property>
	</bean>
	
	<bean name="/ajaxssn.action" class="com.test.mvc.AjaxssnController">
		<property name="dao" ref="employeeDAO"></property>
	
	</bean>
	 
	<bean name="/employeeupdateform.action" class="com.test.mvc.EmployeeUpdateFormController">
		<property name="employeeDAO" ref="employeeDAO"></property>
		<property name="positionDAO" ref="positionDAO"></property>
		<property name="departmentDAO" ref="departmentDAO"></property>
		<property name="regionDAO" ref="regionDAO"></property>
	</bean>
	
	
	<bean name="/employeeupdate.action" class="com.test.mvc.EmployeeUpdateController">
		<property name="dao" ref="employeeDAO"></property>
	</bean>
	
	<!--직원 데이터 삭제 액션 Controller  -->
	
	<bean name="/employeedelete.action" class="com.test.mvc.EmployeeDeleteController">
		<property name="dao" ref="employeeDAO"></property>
	</bean>
	
	<!-- Login 폼 페이지 요청 Controller 등록 -->
	<bean name="/loginform.action" class="com.test.mvc.LoginFormController"></bean>
	
	<!-- Login 액션 Controller 등록  -->
	<bean name="/login.action" class="com.test.mvc.LoginController">
		<property name="dao" ref="employeeDAO"></property>
	</bean>
	
	
	<!-- 로그아웃 액션 Controller등록  -->
	
	<bean name="/logout.action" class="com.test.mvc.LogoutController"></bean>
	
	
	<!-- 직원 리스트스 Controller 등록(일반 회원) -->
	<bean name="/emplist.action" class="com.test.mvc.EmpListController">
	<property name="dao" ref="employeeDAO"></property>
	</bean>

	<!-- 지역리스트 Controller  -->
	<bean name="/regionlist.action" class="com.test.mvc.RegionListController">
	<property name="dao" ref="regionDAO"></property>
	</bean>
	
	<!-- 지역 데이터 입력 폼 Controller 등록  -->
	<bean name="/regioninsertform.action" class="com.test.mvc.RegionInsertFormController"></bean>
	
	<bean name="/regioninsert.action" class="com.test.mvc.RegionInsertController">
	<property name="dao" ref="regionDAO"></property>
	</bean>
	
	<!-- 비슷한 지역명 띄우기용 AjaxController 등록 -->
	<bean name="/regionajax.action" class="com.test.mvc.AjaxRegionController">
	<property name="dao" ref="regionDAO"></property>
	</bean>
	
	<!-- 지역명 수정 Form Controller등록  -->
	<bean name="/regionupdateform.action" class="com.test.mvc.RegionUpdateFormController">
	<property name="dao" ref="regionDAO"></property>
	</bean>
	
	<!-- 지역명 수정 Controller  -->
	<bean name="/regionupate.action" class="com.test.mvc.RegionUpdateController">
	 <property name="dao" ref="regionDAO"></property>
	</bean>
	
	<!-- 지역명 상제  -->
	<bean name="/regiondelete.action" class="com.test.mvc.RegionDeleteController">
	<property name="dao" ref="regionDAO"></property>
	</bean>
	
	
	<!-- 부서리스트  -->
	<bean name="/departmentlist.action" class="com.test.mvc.DepartmentListController">
	<property name="dao" ref="departmentDAO"></property>
	</bean>
	
	
	<!-- 부서 추가 폼 -->
	<bean name="/departmentinsertform.action" class="com.test.mvc.DepartmentInsertFormController">
	</bean>
	
	<!-- 부서 추가 컨트롤러  -->
	<bean name="/departmentinsert.action" class="com.test.mvc.DepartmentInsertController">
	<property name="dao" ref="departmentDAO"></property>
	</bean>
	
	
	
	<!-- 부서 추가 ajax  -->
	<bean name="/departmentajax.action" class="com.test.mvc.DepartmentAjaxController">
	<property name="dao" ref="departmentDAO"></property>
	</bean>
	
	
	<!-- 부서 수정 폼 컨트롤러  -->
	<bean name="/departmentupdateform.action" class="com.test.mvc.DepartmentUpdateFormController">
	<property name="dao" ref="departmentDAO"></property>
	</bean>
	
	<!-- 부서 수정  컨트롤러  -->
	<bean name="/departmentupdate.action" class="com.test.mvc.DepartmentUpdateController">
	<property name="dao" ref="departmentDAO"></property>
	</bean>
	
	
	<!-- 부서 삭제 컨트롤러  -->
	<bean name="/departmentdelete.action" class="com.test.mvc.DepartmentDeleteController">
	<property name="dao" ref="departmentDAO"></property>
	</bean>
	
	
	<!-- 직위 리스트 컨트롤러  -->
	<bean name="/positionlist.action" class="com.test.mvc.PositionListController">
	<property name="dao" ref="positionDAO"></property>
	</bean>
	
	<!-- 직위 인서트 폼 컨트롤러 -->
	<bean name="/positioninsertform.action" class="com.test.mvc.PositionInsertFormController"></bean>
	
	
	<!-- 직위 ajax 컨트롤러 -->
	
	<bean name="/positionajax.action" class="com.test.mvc.PositionAjaxController">
	<property name="dao" ref="positionDAO"></property>
	</bean>
		
	<!-- 직위 인서트 컨트롤러  -->
	 <bean name="/positioninsert.action" class="com.test.mvc.PositionInsertController">
	<property name="dao" ref="positionDAO"></property>
	</bean>
	 
	 <!-- 직위 수정 폼 컨트롤러  -->
	 <bean name="/positionupdateform.action" class="com.test.mvc.PositionUpdateFormController">
	 <property name="dao" ref="positionDAO"></property>
	 </bean>
	 
	  <!-- 직위 수정  컨트롤러  -->
	 <bean name="/positionupdate.action" class="com.test.mvc.PositionUpdateController">
	 <property name="dao" ref="positionDAO"></property>
	 </bean>
	 
	 <!-- 직위 삭제 컨트롤러  -->
	 <bean name="/positiondelete.action" class="com.test.mvc.PositionDeleteController">
	 <property name="dao" ref="positionDAO"></property>
	 </bean>
	 
	 <!-- 일반직원이 보는 부서list 컨트롤러  -->
	 <bean name="/deplist.action" class="com.test.mvc.DepListController">
	 <property name="dao" ref="departmentDAO"></property>
	 </bean>
	 
	 <!-- 일반직원이 보는 지역list 컨트롤러  -->
	 <bean name="/reglist.action" class="com.test.mvc.RegListController">
	 <property name="dao" ref="regionDAO"></property>
	 </bean>
	 
	 <!-- 일반직원이 보는 직위list 컨트롤러  -->
	 <bean name="/poslist.action" class="com.test.mvc.PosListController">
	 <property name="dao" ref="positionDAO"></property>
	 </bean>
	 
</beans>